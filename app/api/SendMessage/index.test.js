const { stringTemplateParser } = require('./index');

// Generated by Copilot

// Test to check if placeholders are replaced with corresponding values
test('replaces_placeholders_with_corresponding_values', () => {
    const template = 'Hello, {{name}}!';
    const values = { name: 'John' };
    const result = stringTemplateParser(template, values);
    expect(result).toBe('Hello, John!');
});

// Test to check if multiple placeholders are handled correctly
test('handles_multiple_placeholders', () => {
    const template = 'Hello, {{name}}! You have {{count}} new messages.';
    const values = { name: 'John', count: 5 };
    const result = stringTemplateParser(template, values);
    expect(result).toBe('Hello, John! You have 5 new messages.');
});

// Test to check if placeholders are left unchanged if no corresponding value is provided
test('leaves_placeholders_unchanged_if_no_corresponding_value', () => {
    const template = 'Hello, {{name}}! You have {{count}} new messages.';
    const values = { name: 'John' };
    const result = stringTemplateParser(template, values);
    expect(result).toBe('Hello, John! You have {{count}} new messages.');
});

// Test to check if an empty template is handled correctly
test('handles_empty_template', () => {
    const template = '';
    const values = { name: 'John' };
    const result = stringTemplateParser(template, values);
    expect(result).toBe('');
});

// Test to check if an empty values object is handled correctly
test('handles_empty_values_object', () => {
    const template = 'Hello, {{name}}!';
    const values = {};
    const result = stringTemplateParser(template, values);
    expect(result).toBe('Hello, {{name}}!');
});